!function(t){"function"==typeof define&&define.amd?define("main",t):t()}((function(){"use strict";const t=new class{constructor(){this.storage={board:document.querySelector(".board"),playButton:document.querySelector(".play-btn"),score:document.querySelector(".score__text"),food:document.querySelector(".food")}}};const e=new class{constructor(){this.el=t.storage.playButton}enable(){this.el.disabled=!1,this.el.style.visibility="visible"}disable(){this.el.disabled=!0,this.el.style.visibility="hidden"}};const s=new class{constructor(){this.el=t.storage.board,this.inner=this.el.querySelector(".board__inner")}};const o=new class{constructor(){this.speed=5,this.direction=null,this.coords=[{x:20,y:10}]}createNewSnake(){const t=this.coords[this.coords.length-1];let e;switch(this.direction){case"up":e={x:t.x,y:t.y+1};break;case"down":e={x:t.x,y:t.y-1};break;case"left":e={x:t.x+1,y:t.y};break;case"right":e={x:t.x-1,y:t.y}}this.coords.push(e);const o=document.createElement("div");o.classList.add("snake"),o.style.gridRowStart=e.y,o.style.gridColumnStart=e.x;const i=document.createElement("div");i.classList.add("snake__inner"),o.appendChild(i),s.inner.appendChild(o)}updateSnakePosition(){const t=document.querySelectorAll(".snake"),e=t[0];for(let e=this.coords.length-1;e>=1&&1!==this.coords.length;e--)this.coords[e]={...this.coords[e-1]},t[e].style.gridRowStart=this.coords[e].y,t[e].style.gridColumnStart=this.coords[e].x;switch(this.direction){case"up":this.coords[0].y=this.coords[0].y-1;break;case"down":this.coords[0].y=this.coords[0].y+1;break;case"left":this.coords[0].x=this.coords[0].x-1;break;case"right":this.coords[0].x=this.coords[0].x+1}e.style.gridRowStart=this.coords[0].y,e.style.gridColumnStart=this.coords[0].x}checkCollisionWithSelf(){if(1!==this.coords.length)for(let t=1;t<this.coords.length;t++)if(Math.abs(this.coords[t].x-this.coords[0].x)<1&&this.coords[t].y-this.coords[0].y==0||Math.abs(this.coords[t].y-this.coords[0].y)<1&&this.coords[t].x-this.coords[0].x==0)return!0}checkCollisionWithWall(){const t=this.coords[0].x,e=this.coords[0].y;if(t>=40||t<=0||e>=20||e<=0)return!0}removeSnake(){const t=document.querySelectorAll(".snake"),e=t.length-1;t.forEach((t,o)=>{0!==o&&setTimeout(()=>s.inner.removeChild(t),250*(e-o))}),this.direction=null,this.coords=[{x:20,y:10}]}};const i=new class{constructor(){this.el=t.storage.score,this.scoreText="Score:",this.scoreCount=0}inc(){this.scoreCount+=10}update(){this.el.textContent=`${this.scoreText} ${this.scoreCount}`}reset(){this.scoreCount=0,this.update()}},r=(t,e)=>(t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t)+t));const c=new class{constructor(){this.x=null,this.y=null,this.el=t.storage.food}getNewCoords(){let t=0,e=0;do{t=r(3,35),e=r(3,15)}while(this.checkFoodCoords(this.x,this.y));this.x=t,this.y=e,null!==this.el?(this.hideFood(),setTimeout(()=>this.changeCoords(),1e3)):this.createFood()}changeCoords(){this.el.style.gridRowStart=this.y,this.el.style.gridColumnStart=this.x,this.showFood()}checkFoodCoords(t,e){o.coords.forEach(s=>{if(t===s.x&&e===s.y)return!0})}checkCollisionWithSnake(){const t=o.coords[0].x,e=o.coords[0].y;(Math.abs(this.x-t)<1&&0===Math.abs(this.y-e)||Math.abs(this.y-e)<1&&0===Math.abs(this.x-t))&&(i.inc(),i.update(),this.getNewCoords(),o.createNewSnake())}showFood(){this.el.style.visibility="visible"}hideFood(){this.el.style.visibility="hidden"}},n=new Audio;n.loop=!0,n.src="./sounds/music.mp3";function d(t){if(o.checkCollisionWithSelf()||o.checkCollisionWithWall())return void h.endGame();window.requestAnimationFrame(d);(t-h.lastRenderTime)/1e3<1/o.speed||(h.lastRenderTime=t,o.updateSnakePosition(),c.checkCollisionWithSnake())}const h=new class{constructor(){this.lastRenderTime=0}startGame(){n.play(),e.disable(),c.getNewCoords(),d()}endGame(){n.pause(),n.currentTime=0,this.lastRenderTime=0,e.enable(),c.hideFood(),o.removeSnake(),i.reset()}},a=t=>{switch(t.keyCode){case 38:"down"!==o.direction&&(o.direction="up");break;case 40:"up"!==o.direction&&(o.direction="down");break;case 37:"right"!==o.direction&&(o.direction="left");break;case 39:"left"!==o.direction&&(o.direction="right")}};window.addEventListener("DOMContentLoaded",()=>{e.el.addEventListener("click",()=>h.startGame()),window.addEventListener("keydown",a)})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9qcy9kb21yZWYuanMiLCJhcHAvY29tcG9uZW50cy91aS9wbGF5LWJ1dHRvbi9wbGF5LWJ0bi5qcyIsImFwcC9jb21wb25lbnRzL2NvbW1vbi9ib2FyZC9ib2FyZC5qcyIsImFwcC9jb21wb25lbnRzL2NvbW1vbi9zbmFrZS9zbmFrZS5qcyIsImFwcC9jb21wb25lbnRzL2NvbW1vbi9zY29yZS9zY29yZS5qcyIsImFwcC9qcy9oZWxwZXJzLmpzIiwiYXBwL2NvbXBvbmVudHMvY29tbW9uL2Zvb2QvZm9vZC5qcyIsImFwcC9qcy9zb3VuZC5qcyIsImFwcC9jb21wb25lbnRzL2NvbW1vbi9nYW1lL2dhbWUuanMiLCJhcHAvanMvY29udHJvbGxlci5qcyIsImFwcC9qcy9tYWluLmpzIl0sIm5hbWVzIjpbImRvbXJlZiIsImNvbnN0cnVjdG9yIiwidGhpcyIsInN0b3JhZ2UiLCJib2FyZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInBsYXlCdXR0b24iLCJzY29yZSIsImZvb2QiLCJlbCIsImVuYWJsZSIsImRpc2FibGVkIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiZGlzYWJsZSIsImlubmVyIiwic25ha2UiLCJzcGVlZCIsImRpcmVjdGlvbiIsImNvb3JkcyIsIngiLCJ5IiwiY3JlYXRlTmV3U25ha2UiLCJsYXN0UGllY2VDb29yZHMiLCJsZW5ndGgiLCJuZXdQaWVjZUNvb3JkcyIsInB1c2giLCJzbmFrZVBpZWNlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW5TdGFydCIsInNuYWtlSW5uZXIiLCJhcHBlbmRDaGlsZCIsInVwZGF0ZVNuYWtlUG9zaXRpb24iLCJzbmFrZUJvZHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwic25ha2VIZWFkIiwiaSIsImNoZWNrQ29sbGlzaW9uV2l0aFNlbGYiLCJNYXRoIiwiYWJzIiwiY2hlY2tDb2xsaXNpb25XaXRoV2FsbCIsInNuYWtlSGVhZFgiLCJzbmFrZUhlYWRZIiwicmVtb3ZlU25ha2UiLCJhcnJheUVuZCIsImZvckVhY2giLCJpdGVtIiwiaW5kZXgiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQ2hpbGQiLCJzY29yZVRleHQiLCJzY29yZUNvdW50IiwiaW5jIiwidXBkYXRlIiwidGV4dENvbnRlbnQiLCJyZXNldCIsImdldFJhbmRvbU51bWJlciIsIm1pbiIsIm1heCIsImNlaWwiLCJmbG9vciIsInJhbmRvbSIsImdldE5ld0Nvb3JkcyIsIm5ld1giLCJuZXdZIiwiY2hlY2tGb29kQ29vcmRzIiwiaGlkZUZvb2QiLCJjaGFuZ2VDb29yZHMiLCJjcmVhdGVGb29kIiwic2hvd0Zvb2QiLCJjaGVja0NvbGxpc2lvbldpdGhTbmFrZSIsIm11c2ljIiwiQXVkaW8iLCJsb29wIiwic3JjIiwicGxheUdhbWUiLCJjdXJyZW50VGltZSIsImdhbWUiLCJlbmRHYW1lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibGFzdFJlbmRlclRpbWUiLCJzdGFydEdhbWUiLCJwbGF5IiwicGF1c2UiLCJwcmVzc0tleSIsImUiLCJrZXlDb2RlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImtHQVdBLE1BQU1BLEVBQVMsSUFYZixNQUNFQyxjQUNFQyxLQUFLQyxRQUFVLENBQ2JDLE1BQU9DLFNBQVNDLGNBQWMsVUFDOUJDLFdBQVlGLFNBQVNDLGNBQWMsYUFDbkNFLE1BQU9ILFNBQVNDLGNBQWMsZ0JBQzlCRyxLQUFNSixTQUFTQyxjQUFjLFlDWW5DLE1BQU1DLEVBQWEsSUFoQm5CLE1BQ0VOLGNBQ0VDLEtBQUtRLEdBQUtWLEVBQU9HLFFBQVFJLFdBRzNCSSxTQUNFVCxLQUFLUSxHQUFHRSxVQUFXLEVBQ25CVixLQUFLUSxHQUFHRyxNQUFNQyxXQUFhLFVBRzdCQyxVQUNFYixLQUFLUSxHQUFHRSxVQUFXLEVBQ25CVixLQUFLUSxHQUFHRyxNQUFNQyxXQUFhLFdDTC9CLE1BQU1WLEVBQVEsSUFQZCxNQUNFSCxjQUNFQyxLQUFLUSxHQUFLVixF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eEIsRUFBTTJCLHlCQUUxQyxZQURBcUMsRUFBS0MsVUFJUEMsT0FBT0Msc0JBQXNCTCxJQUVHQyxFQUFjQyxFQUFLSSxnQkFBa0IsSUFFeEMsRUFBSXBFLEVBQU1DLFFBSXZDK0QsRUFBS0ksZUFBaUJMLEVBRXRCL0QsRUFBTW1CLHNCQUNOM0IsRUFBS2lFLDJCQUdQLE1BQU1PLEVBQU8sSUFoRGIsTUFDRWhGLGNBQ0VDLEtBQUttRixlQUFpQixFQUd4QkMsWUFDRVgsRUFBTVksT0FFTmhGLEVBQVdRLFVBRVhOLEVBQUt5RCxlQUVMYSxJQUdGRyxVQUNFUCxFQUFNYSxRQUNOYixFQUFNSyxZQUFjLEVBRXBCOUUsS0FBS21GLGVBQWlCLEVBRXRCOUUsRUFBV0ksU0FDWEYsRUFBSzZELFdBQ0xyRCxFQUFNOEIsY0FDTnZDLEVBQU1tRCxVQzdCSjhCLEVBQVlDLElBQ2hCLE9BQVFBLEVBQUVDLFNBQ1IsS0FBSyxHQUNxQixTQUFwQjFFLEVBQU1FLFlBQ1JGLEVBQU1FLFVBQVksTUFFcEIsTUFDRixLQUFLLEdBQ3FCLE9BQXBCRixFQUFNRSxZQUNSRixFQUFNRSxVQUFZLFFBRXBCLE1BQ0YsS0FBSyxHQUNxQixVQUFwQkYsRUFBTUUsWUFDUkYsRUFBTUUsVUFBWSxRQUVwQixNQUNGLEtBQUssR0FDcUIsU0FBcEJGLEVBQU1FLFlBQ1JGLEVBQU1FLFVBQVksV0NSMUJnRSxPQUFPUyxpQkFBaUIsbUJBTFgsS0FIWHJGLEVBQVdHLEdBQUdrRixpQkFBaUIsUUFBUyxJQUFNWCxFQUFLSyxhQUtuREgsT0FBT1MsaUJBQWlCLFVBQVdIIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRE9NUmVmIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3RvcmFnZSA9IHtcclxuICAgICAgYm9hcmQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYm9hcmRcIiksXHJcbiAgICAgIHBsYXlCdXR0b246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxheS1idG5cIiksXHJcbiAgICAgIHNjb3JlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNjb3JlX190ZXh0XCIpLFxyXG4gICAgICBmb29kOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvb2RcIilcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBkb21yZWYgPSBuZXcgRE9NUmVmKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkb21yZWY7XHJcbiIsImltcG9ydCBkb21yZWYgZnJvbSBcIi4uLy4uLy4uL2pzL2RvbXJlZi5qc1wiO1xyXG5cclxuY2xhc3MgUGxheUJ1dHRvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmVsID0gZG9tcmVmLnN0b3JhZ2UucGxheUJ1dHRvbjtcclxuICB9XHJcblxyXG4gIGVuYWJsZSgpIHtcclxuICAgIHRoaXMuZWwuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuZWwuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZSgpIHtcclxuICAgIHRoaXMuZWwuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHBsYXlCdXR0b24gPSBuZXcgUGxheUJ1dHRvbigpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcGxheUJ1dHRvbjtcclxuIiwiaW1wb3J0IGRvbXJlZiBmcm9tIFwiLi4vLi4vLi4vanMvZG9tcmVmLmpzXCI7XHJcblxyXG5jbGFzcyBCb2FyZCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmVsID0gZG9tcmVmLnN0b3JhZ2UuYm9hcmQ7XHJcbiAgICB0aGlzLmlubmVyID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKFwiLmJvYXJkX19pbm5lclwiKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGJvYXJkID0gbmV3IEJvYXJkKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBib2FyZDtcclxuIiwiaW1wb3J0IGJvYXJkIGZyb20gXCIuLi9ib2FyZC9ib2FyZC5qc1wiO1xyXG5cclxuY2xhc3MgU25ha2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zcGVlZCA9IDU7XHJcbiAgICB0aGlzLmRpcmVjdGlvbiA9IG51bGw7XHJcbiAgICB0aGlzLmNvb3JkcyA9IFt7IHg6IDIwLCB5OiAxMCB9XTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZU5ld1NuYWtlKCkge1xyXG4gICAgY29uc3QgbGFzdFBpZWNlQ29vcmRzID0gdGhpcy5jb29yZHNbdGhpcy5jb29yZHMubGVuZ3RoIC0gMV07XHJcbiAgICBsZXQgbmV3UGllY2VDb29yZHM7XHJcblxyXG4gICAgc3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xyXG4gICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICBuZXdQaWVjZUNvb3JkcyA9IHsgeDogbGFzdFBpZWNlQ29vcmRzLngsIHk6IGxhc3RQaWVjZUNvb3Jkcy55ICsgMSB9O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiZG93blwiOlxyXG4gICAgICAgIG5ld1BpZWNlQ29vcmRzID0geyB4OiBsYXN0UGllY2VDb29yZHMueCwgeTogbGFzdFBpZWNlQ29vcmRzLnkgLSAxIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XHJcbiAgICAgICAgbmV3UGllY2VDb29yZHMgPSB7IHg6IGxhc3RQaWVjZUNvb3Jkcy54ICsgMSwgeTogbGFzdFBpZWNlQ29vcmRzLnkgfTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBcInJpZ2h0XCI6XHJcbiAgICAgICAgbmV3UGllY2VDb29yZHMgPSB7IHg6IGxhc3RQaWVjZUNvb3Jkcy54IC0gMSwgeTogbGFzdFBpZWNlQ29vcmRzLnkgfTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvb3Jkcy5wdXNoKG5ld1BpZWNlQ29vcmRzKTtcclxuXHJcbiAgICBjb25zdCBzbmFrZVBpZWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHNuYWtlUGllY2UuY2xhc3NMaXN0LmFkZChcInNuYWtlXCIpO1xyXG4gICAgc25ha2VQaWVjZS5zdHlsZS5ncmlkUm93U3RhcnQgPSBuZXdQaWVjZUNvb3Jkcy55O1xyXG4gICAgc25ha2VQaWVjZS5zdHlsZS5ncmlkQ29sdW1uU3RhcnQgPSBuZXdQaWVjZUNvb3Jkcy54O1xyXG5cclxuICAgIGNvbnN0IHNuYWtlSW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgc25ha2VJbm5lci5jbGFzc0xpc3QuYWRkKFwic25ha2VfX2lubmVyXCIpO1xyXG4gICAgc25ha2VQaWVjZS5hcHBlbmRDaGlsZChzbmFrZUlubmVyKTtcclxuXHJcbiAgICBib2FyZC5pbm5lci5hcHBlbmRDaGlsZChzbmFrZVBpZWNlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNuYWtlUG9zaXRpb24oKSB7XHJcbiAgICBjb25zdCBzbmFrZUJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNuYWtlXCIpO1xyXG4gICAgY29uc3Qgc25ha2VIZWFkID0gc25ha2VCb2R5WzBdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSB0aGlzLmNvb3Jkcy5sZW5ndGggLSAxOyBpID49IDE7IGktLSkge1xyXG4gICAgICBpZiAodGhpcy5jb29yZHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jb29yZHNbaV0gPSB7IC4uLnRoaXMuY29vcmRzW2kgLSAxXX07XHJcbiAgICAgICAgc25ha2VCb2R5W2ldLnN0eWxlLmdyaWRSb3dTdGFydCA9IHRoaXMuY29vcmRzW2ldLnk7XHJcbiAgICAgICAgc25ha2VCb2R5W2ldLnN0eWxlLmdyaWRDb2x1bW5TdGFydCA9IHRoaXMuY29vcmRzW2ldLng7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgXCJ1cFwiOlxyXG4gICAgICAgIHRoaXMuY29vcmRzWzBdLnkgPSB0aGlzLmNvb3Jkc1swXS55IC0gMTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBcImRvd25cIjpcclxuICAgICAgICB0aGlzLmNvb3Jkc1swXS55ID0gdGhpcy5jb29yZHNbMF0ueSArIDE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XHJcbiAgICAgICAgdGhpcy5jb29yZHNbMF0ueCA9IHRoaXMuY29vcmRzWzBdLnggLSAxO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICB0aGlzLmNvb3Jkc1swXS54ID0gdGhpcy5jb29yZHNbMF0ueCArIDE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgc25ha2VIZWFkLnN0eWxlLmdyaWRSb3dTdGFydCA9IHRoaXMuY29vcmRzWzBdLnk7XHJcbiAgICBzbmFrZUhlYWQuc3R5bGUuZ3JpZENvbHVtblN0YXJ0ID0gdGhpcy5jb29yZHNbMF0ueDtcclxuICB9XHJcblxyXG4gIGNoZWNrQ29sbGlzaW9uV2l0aFNlbGYoKSB7XHJcbiAgICBpZiAodGhpcy5jb29yZHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuY29vcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoTWF0aC5hYnModGhpcy5jb29yZHNbaV0ueCAtIHRoaXMuY29vcmRzWzBdLngpIDwgMSAmJiAodGhpcy5jb29yZHNbaV0ueSAtIHRoaXMuY29vcmRzWzBdLnkpID09PSAwKSB8fFxyXG4gICAgICAgIChNYXRoLmFicyh0aGlzLmNvb3Jkc1tpXS55IC0gdGhpcy5jb29yZHNbMF0ueSkgPCAxICYmICh0aGlzLmNvb3Jkc1tpXS54IC0gdGhpcy5jb29yZHNbMF0ueCkgPT09IDApXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjaGVja0NvbGxpc2lvbldpdGhXYWxsKCkge1xyXG4gICAgY29uc3Qgc25ha2VIZWFkWCA9IHRoaXMuY29vcmRzWzBdLng7XHJcbiAgICBjb25zdCBzbmFrZUhlYWRZID0gdGhpcy5jb29yZHNbMF0ueTtcclxuICAgIGlmIChcclxuICAgICAgKHNuYWtlSGVhZFggPj0gNDAgfHwgc25ha2VIZWFkWCA8PSAwKSB8fCBcclxuICAgICAgKHNuYWtlSGVhZFkgPj0gMjAgfHwgc25ha2VIZWFkWSA8PSAwKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZVNuYWtlKCkge1xyXG4gICAgY29uc3QgaW50ZXJ2YWxNdWx0aXBsaWVyID0gMjUwOyAvLyBtaWxsaXNlY29uZHNcclxuICAgIGNvbnN0IHNuYWtlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zbmFrZVwiKVxyXG5cclxuICAgIGNvbnN0IGFycmF5RW5kID0gc25ha2UubGVuZ3RoIC0gMTtcclxuXHJcbiAgICBzbmFrZS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiBib2FyZC5pbm5lci5yZW1vdmVDaGlsZChpdGVtKSwgKGFycmF5RW5kIC0gaW5kZXgpICogaW50ZXJ2YWxNdWx0aXBsaWVyKTtcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBudWxsO1xyXG4gICAgdGhpcy5jb29yZHMgPSBbe3g6IDIwLCB5OiAxMH1dXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBzbmFrZSA9IG5ldyBTbmFrZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc25ha2U7IiwiaW1wb3J0IGRvbXJlZiBmcm9tIFwiLi4vLi4vLi4vanMvZG9tcmVmLmpzXCI7XHJcblxyXG5jbGFzcyBTY29yZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmVsID0gZG9tcmVmLnN0b3JhZ2Uuc2NvcmU7XHJcbiAgICB0aGlzLnNjb3JlVGV4dCA9IFwiU2NvcmU6XCI7XHJcbiAgICB0aGlzLnNjb3JlQ291bnQgPSAwO1xyXG4gIH1cclxuXHJcbiAgaW5jKCkge1xyXG4gICAgdGhpcy5zY29yZUNvdW50ICs9IDEwO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5lbC50ZXh0Q29udGVudCA9IGAke3RoaXMuc2NvcmVUZXh0fSAke3RoaXMuc2NvcmVDb3VudH1gO1xyXG4gIH1cclxuXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnNjb3JlQ291bnQgPSAwO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNjb3JlID0gbmV3IFNjb3JlKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzY29yZTtcclxuIiwiY29uc3QgZ2V0UmFuZG9tTnVtYmVyID0gKG1pbiwgbWF4KSA9PiB7XHJcbiAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRSYW5kb21OdW1iZXI7XHJcbiIsImltcG9ydCBkb21yZWYgZnJvbSBcIi4uLy4uLy4uL2pzL2RvbXJlZi5qc1wiO1xyXG5cclxuaW1wb3J0IHNjb3JlIGZyb20gXCIuLi9zY29yZS9zY29yZS5qc1wiO1xyXG5pbXBvcnQgc25ha2UgZnJvbSBcIi4uL3NuYWtlL3NuYWtlLmpzXCI7XHJcbmltcG9ydCBib2FyZCBmcm9tIFwiLi4vYm9hcmQvYm9hcmQuanNcIjtcclxuXHJcbmltcG9ydCBnZXRSYW5kb21OdW1iZXIgZnJvbSBcIi4uLy4uLy4uL2pzL2hlbHBlcnMuanNcIjtcclxuXHJcbmNsYXNzIEZvb2Qge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy54ID0gbnVsbDtcclxuICAgIHRoaXMueSA9IG51bGw7XHJcbiAgICB0aGlzLmVsID0gZG9tcmVmLnN0b3JhZ2UuZm9vZDtcclxuICB9XHJcblxyXG4gIGdldE5ld0Nvb3JkcygpIHtcclxuICAgIGxldCBuZXdYID0gMDtcclxuICAgIGxldCBuZXdZID0gMDtcclxuXHJcbiAgICBkbyB7XHJcbiAgICAgIG5ld1ggPSBnZXRSYW5kb21OdW1iZXIoMywgMzUpO1xyXG4gICAgICBuZXdZID0gZ2V0UmFuZG9tTnVtYmVyKDMsIDE1KTtcclxuICAgIH0gd2hpbGUgKHRoaXMuY2hlY2tGb29kQ29vcmRzKHRoaXMueCwgdGhpcy55KSk7XHJcblxyXG4gICAgdGhpcy54ID0gbmV3WDtcclxuICAgIHRoaXMueSA9IG5ld1k7XHJcblxyXG4gICAgLy8gV2hlbiBmb29kIGlzIGNyZWF0ZWQgZm9yIHRoZSBmaXJzdCB0aW1lIGFmdGVyIHByZXNzaW5nIHRoZSBQbGF5IGJ1dHRvbi5cclxuICAgIGlmICh0aGlzLmVsID09PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlRm9vZCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5oaWRlRm9vZCgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNoYW5nZUNvb3JkcygpLCAxMDAwKTtcclxuICB9XHJcblxyXG4gIGNoYW5nZUNvb3JkcygpIHtcclxuICAgIHRoaXMuZWwuc3R5bGUuZ3JpZFJvd1N0YXJ0ID0gdGhpcy55O1xyXG4gICAgdGhpcy5lbC5zdHlsZS5ncmlkQ29sdW1uU3RhcnQgPSB0aGlzLng7XHJcbiAgICB0aGlzLnNob3dGb29kKCk7XHJcbiAgfVxyXG5cclxuICBjaGVja0Zvb2RDb29yZHMoeCwgeSkge1xyXG4gICAgc25ha2UuY29vcmRzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgaWYgKHggPT09IGl0ZW0ueCAmJiB5ID09PSBpdGVtLnkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjaGVja0NvbGxpc2lvbldpdGhTbmFrZSgpIHtcclxuICAgIGNvbnN0IHNuYWtlSGVhZFggPSBzbmFrZS5jb29yZHNbMF0ueDtcclxuICAgIGNvbnN0IHNuYWtlSGVhZFkgPSBzbmFrZS5jb29yZHNbMF0ueTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIChNYXRoLmFicyh0aGlzLnggLSBzbmFrZUhlYWRYKSA8IDEgJiZcclxuICAgICAgICBNYXRoLmFicyh0aGlzLnkgLSBzbmFrZUhlYWRZKSA9PT0gMCkgfHxcclxuICAgICAgKE1hdGguYWJzKHRoaXMueSAtIHNuYWtlSGVhZFkpIDwgMSAmJiBNYXRoLmFicyh0aGlzLnggLSBzbmFrZUhlYWRYKSA9PT0gMClcclxuICAgICkge1xyXG4gICAgICBzY29yZS5pbmMoKTtcclxuICAgICAgc2NvcmUudXBkYXRlKCk7XHJcblxyXG4gICAgICB0aGlzLmdldE5ld0Nvb3JkcygpO1xyXG4gICAgICBzbmFrZS5jcmVhdGVOZXdTbmFrZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvd0Zvb2QoKSB7XHJcbiAgICB0aGlzLmVsLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICB9XHJcblxyXG4gIGhpZGVGb29kKCkge1xyXG4gICAgdGhpcy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGZvb2QgPSBuZXcgRm9vZCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZm9vZDtcclxuIiwiY29uc3QgbXVzaWMgPSBuZXcgQXVkaW8oKTtcclxubXVzaWMubG9vcCA9IHRydWU7XHJcbm11c2ljLnNyYyA9IFwiLi9zb3VuZHMvbXVzaWMubXAzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtdXNpYztcclxuIiwiaW1wb3J0IHBsYXlCdXR0b24gZnJvbSBcIi4uLy4uL3VpL3BsYXktYnV0dG9uL3BsYXktYnRuLmpzXCI7XHJcbmltcG9ydCBzbmFrZSBmcm9tIFwiLi4vc25ha2Uvc25ha2UuanNcIjtcclxuaW1wb3J0IHNjb3JlIGZyb20gXCIuLi9zY29yZS9zY29yZS5qc1wiO1xyXG5pbXBvcnQgZm9vZCBmcm9tIFwiLi4vZm9vZC9mb29kLmpzXCI7XHJcblxyXG5pbXBvcnQgbXVzaWMgZnJvbSBcIi4uLy4uLy4uL2pzL3NvdW5kLmpzXCI7XHJcblxyXG5jbGFzcyBHYW1lIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubGFzdFJlbmRlclRpbWUgPSAwO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRHYW1lKCkge1xyXG4gICAgbXVzaWMucGxheSgpO1xyXG5cclxuICAgIHBsYXlCdXR0b24uZGlzYWJsZSgpO1xyXG5cclxuICAgIGZvb2QuZ2V0TmV3Q29vcmRzKCk7XHJcblxyXG4gICAgcGxheUdhbWUoKTtcclxuICB9XHJcblxyXG4gIGVuZEdhbWUoKSB7XHJcbiAgICBtdXNpYy5wYXVzZSgpO1xyXG4gICAgbXVzaWMuY3VycmVudFRpbWUgPSAwO1xyXG5cclxuICAgIHRoaXMubGFzdFJlbmRlclRpbWUgPSAwO1xyXG5cclxuICAgIHBsYXlCdXR0b24uZW5hYmxlKCk7XHJcbiAgICBmb29kLmhpZGVGb29kKCk7XHJcbiAgICBzbmFrZS5yZW1vdmVTbmFrZSgpO1xyXG4gICAgc2NvcmUucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBsYXlHYW1lKGN1cnJlbnRUaW1lKSB7XHJcbiAgaWYgKHNuYWtlLmNoZWNrQ29sbGlzaW9uV2l0aFNlbGYoKSB8fCBzbmFrZS5jaGVja0NvbGxpc2lvbldpdGhXYWxsKCkpIHtcclxuICAgIGdhbWUuZW5kR2FtZSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShwbGF5R2FtZSk7XHJcblxyXG4gIGNvbnN0IHNlY29uZHNTaW5jZUxhc3RSZW5kZXIgPSAoY3VycmVudFRpbWUgLSBnYW1lLmxhc3RSZW5kZXJUaW1lKSAvIDEwMDA7XHJcblxyXG4gIGlmIChzZWNvbmRzU2luY2VMYXN0UmVuZGVyIDwgMSAvIHNuYWtlLnNwZWVkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBnYW1lLmxhc3RSZW5kZXJUaW1lID0gY3VycmVudFRpbWU7XHJcblxyXG4gIHNuYWtlLnVwZGF0ZVNuYWtlUG9zaXRpb24oKTtcclxuICBmb29kLmNoZWNrQ29sbGlzaW9uV2l0aFNuYWtlKCk7XHJcbn1cclxuXHJcbmNvbnN0IGdhbWUgPSBuZXcgR2FtZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2FtZTtcclxuIiwiaW1wb3J0IHNuYWtlIGZyb20gXCIuLi9jb21wb25lbnRzL2NvbW1vbi9zbmFrZS9zbmFrZS5qc1wiXHJcblxyXG5jb25zdCBwcmVzc0tleSA9IChlKSA9PiB7XHJcbiAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgIGNhc2UgMzg6XHJcbiAgICAgIGlmIChzbmFrZS5kaXJlY3Rpb24gIT09IFwiZG93blwiKSB7XHJcbiAgICAgICAgc25ha2UuZGlyZWN0aW9uID0gXCJ1cFwiO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA0MDpcclxuICAgICAgaWYgKHNuYWtlLmRpcmVjdGlvbiAhPT0gXCJ1cFwiKSB7XHJcbiAgICAgICAgc25ha2UuZGlyZWN0aW9uID0gXCJkb3duXCI7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDM3OlxyXG4gICAgICBpZiAoc25ha2UuZGlyZWN0aW9uICE9PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICBzbmFrZS5kaXJlY3Rpb24gPSBcImxlZnRcIjtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMzk6XHJcbiAgICAgIGlmIChzbmFrZS5kaXJlY3Rpb24gIT09IFwibGVmdFwiKSB7XHJcbiAgICAgICAgc25ha2UuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcmVzc0tleTsiLCJpbXBvcnQgZ2FtZSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21tb24vZ2FtZS9nYW1lLmpzXCI7XHJcbmltcG9ydCBwbGF5QnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL3VpL3BsYXktYnV0dG9uL3BsYXktYnRuLmpzXCI7XHJcbmltcG9ydCBwcmVzc0tleSBmcm9tIFwiLi9jb250cm9sbGVyLmpzXCI7XHJcblxyXG5jb25zdCBpbml0UGxheUJ1dHRvbiA9ICgpID0+IHtcclxuICBwbGF5QnV0dG9uLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBnYW1lLnN0YXJ0R2FtZSgpKTtcclxufTtcclxuXHJcbmNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgaW5pdFBsYXlCdXR0b24oKTtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgcHJlc3NLZXkpO1xyXG59O1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGluaXQpOyJdfQ==
